function updateDestinationSheet() {
  const sourceSheetId = 'ID_DE_LA_FEUILLE_DE_CALCUL_SOURCE';
  const destinationSheetName = 'NOM_DE_LA_FEUILLE_DE_CALCUL_DESTINATION';
  const destinationStartRow = 2; // La première ligne de données de la feuille de calcul de destination
  const sourceSheetName = 'NOM_DE_LA_FEUILLE_SOURCE';

  var destinationSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(destinationSheetName);
  if (!destinationSheet) {
    throw new Error('Feuille de calcul destination introuvable');
  }

  var sourceSheet = SpreadsheetApp.openById(sourceSheetId).getSheetByName(sourceSheetName);

  var sourceData = sourceSheet.getDataRange().getValues();
  var destinationData = destinationSheet.getDataRange().getValues();

  // Utilise la méthode filter pour n'inclure que les lignes de la source qui ne sont pas déjà dans la destination
  var newData = sourceData.filter(function(sourceRow) {
    return !destinationData.some(function(destinationRow) {
      return destinationRow[1] === sourceRow[1];
    });
  });

  // Si des nouvelles données ont été trouvées, les ajoute à la feuille de calcul de destination
  if (newData.length > 0) {
    var numRows = newData.length;
    var numCols = newData[0].length;

    // Utilise la méthode map pour ajouter le statut "À mettre à jour" aux nouvelles données
    newData = newData.map(function(row) {
      return row.concat(['À mettre à jour']);
    });

    // Utilise la méthode splice pour insérer les nouvelles données dans la feuille de calcul de destination
    destinationSheet.getRange(destinationStartRow, 1, 0, numCols).insertRowsBefore(1, numRows);
    destinationSheet.getRange(destinationStartRow, 1, numRows, numCols).setValues(newData);
  }

  // Utilise la méthode filter pour ne garder que les lignes de la destination qui ne sont pas déjà dans la source
  var rowsToDelete = destinationData.filter(function(destinationRow) {
    return !sourceData.some(function(sourceRow) {
      return sourceRow[1] === destinationRow[1];
    });
  }).map(function(row) {
    return destinationData.indexOf(row) + 1;
  }).reverse();

  // Utilise la méthode forEach pour supprimer les lignes de la feuille de calcul de destination
  rowsToDelete.forEach(function(rowIndex) {
    destinationSheet.deleteRow(rowIndex);
  });

  // Met à jour les lignes existantes dans la feuille de calcul de destination avec les nouvelles données
  destinationData.forEach(function(destinationRow, destinationRowIndex) {
    var sourceRow = sourceData.find(function(row) {
      return row[1] === destinationRow[1];
    });

    if (sourceRow) {
      destinationRow.forEach(function(cell, cellIndex) {
        if (cell !== sourceRow[cellIndex]) {
          destinationSheet.getRange(destinationRowIndex + 1, cellIndex + 1).setValue(sourceRow[cellIndex]);
        }
      });
    }
  });
}
